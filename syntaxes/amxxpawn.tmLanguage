<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>fileTypes</key>
    <array>
        <string>sma</string>
        <string>inc</string>
    </array>
    <key>foldingStartMarker</key>
    <string>(?x)
         /\*\*(?!\*)
        |^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
    </string>
    <key>foldingStopMarker</key>
    <string>(?&lt;!\*)\*\*/|^\s*\}</string>
    <key>name</key>
    <string>AMXXPawn</string>
    <key>patterns</key>
    <array>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-enabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-disabled</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#preprocessor-rule-other</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#comments</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\b</string>
            <key>name</key>
            <string>keyword.control.amxxpawn</string>
        </dict>
        <dict>
            <key>match</key>
            <!--<string>(?<!case\s)\b([A-Za-z_$@]\w+\s*:)</string>-->
            <string>\b(?:Float|bool|_|any|LibType|AdminProp|HashType|CvarBounds|floatround_method|anglemode|Handle|Array|Trie|Snapshot|TrieIter|Stack|DataPack|SortMethod|SortType|INIParser|SMCParser|SMCResult|SMCError|HamHook|Ham|HamError|HamItemInfo|CsTeams|CsInternalModel|CsArmorType|MapObjective|TraceResult|KeyValueData|ClientData|EntityState|UserCmd|AlertType)\s*:</string>
            <key>name</key>
            <string>storage.type.amxxpawn</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(enum)\s+([A-Za-z_$@]\w+)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.type.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>storage.type.amxxpawn</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(const|static|stock|public|new|enum|native)\b</string>
            <key>name</key>
            <string>storage.modifier.amxxpawn</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(true|false|__DATE__|__TIME__|__LINE__|__BINARY_PATH__|__BINARY_NAME__|cellbits|cellmax|cellmin|__Pawn|debug)\b</string>
            <key>name</key>
            <string>constant.language.amxxpawn</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#sizeof</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b((0(x|X)[0-9a-fA-F]*)|([0-9]+\.?[0-9]*))\b</string>
            <key>name</key>
            <string>constant.numeric.amxxpawn</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.amxxpawn</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.amxxpawn</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.single.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#string_escaped_char</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?x)
                ^\s*\#\s*(define)\s+             # define
                ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
                (?:                              # and optionally:
                    (\()                         # an open parenthesis
                        (
                            \s* \g&lt;id&gt; \s*       # first argument
                            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
                            (?:\.\.\.)?          # varargs ellipsis?
                        )
                    (\))                         # a close parenthesis
                )?
            </string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.define.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.preprocessor.amxxpawn</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
                <key>5</key>
                <dict>
                    <key>name</key>
                    <string>variable.parameter.preprocessor.amxxpawn</string>
                </dict>
                <key>7</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.separator.parameters.amxxpawn</string>
                </dict>
                <key>8</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.macro.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*(error)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.error.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>$</string>
            <key>name</key>
            <string>meta.preprocessor.diagnostic.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*((?:try)?include)\b\s+</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.include.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.amxxpawn.include</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>"</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>"</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.double.include.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>&lt;</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.begin.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>&gt;</string>
                    <key>endCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.string.end.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>name</key>
                    <string>string.quoted.other.lt-gt.include.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>include</key>
            <string>#pragma-mark</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*(define|defined|elseif|else|if|pragma|undef)\b</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?=(?://|/\*))|$</string>
            <key>name</key>
            <string>meta.preprocessor.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>(?&gt;\\\s*\n)</string>
                    <key>name</key>
                    <string>punctuation.separator.continuation.amxxpawn</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>include</key>
            <string>#block</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?x)
            (?:  ^                                 # begin-of-line
              |
                 (?: (?= \s )           (?&lt;!else|new|return) (?&lt;=\w)      #  or word + space before name
                   | (?= \s*[A-Za-z_] ) (?&lt;!&amp;&amp;)       (?&lt;=[*&amp;&gt;])   #  or type modifier before name
                 )
            )
            (\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()
            (
                (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name
                (?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )  # if it is a C++ operator
            )
             \s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.whitespace.function.leading.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>entity.name.function.amxxpawn</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})|(?=#)|(;)</string>
            <key>name</key>
            <string>meta.function.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#comments</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#parens</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\bconst\b</string>
                    <key>name</key>
                    <string>storage.modifier.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block</string>
                </dict>
            </array>
        </dict>
    </array>
    <key>repository</key>
    <dict>
        <key>block</key>
        <dict>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>name</key>
            <string>meta.block.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                </dict>
            </array>
        </dict>
        <key>block_innards</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-enabled-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-disabled-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#preprocessor-rule-other-block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#sizeof</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.whitespace.support.function.leading.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>support.function.C99.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>(\s*)\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.whitespace.function-call.leading.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>support.function.any-method.amxxpawn</string>
                        </dict>
                        <key>3</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.parameters.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>(?x) (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
            (\b
                (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
            )
             \s*(\()</string>
                    <key>name</key>
                    <string>meta.function-call.amxxpawn</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>variable.other.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.parameters.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>(?x)
                    (?x)
            (?:
                 (?: (?= \s )           (?&lt;!else|new|return) (?&lt;=\w)\s+      #  or word + space before name
                 )
            )
            (
                (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
                (?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )?  # if it is a C++ operator
            )
             \s*(\()</string>
                    <key>name</key>
                    <string>meta.initialization.amxxpawn</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#block</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>comments</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.block.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
                    <key>name</key>
                    <string>comment.block.amxxpawn</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>/\*</string>
                    <key>captures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>\*/</string>
                    <key>name</key>
                    <string>comment.block.amxxpawn</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\*/.*\n</string>
                    <key>name</key>
                    <string>invalid.illegal.stray-comment-end.amxxpawn</string>
                </dict>
                <dict>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.toc-list.banner.line.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>match</key>
                    <string>^// =(\s*.*?)\s*=\s*$\n?</string>
                    <key>name</key>
                    <string>comment.line.banner.c++</string>
                </dict>
                <dict>
                    <key>begin</key>
                    <string>//</string>
                    <key>beginCaptures</key>
                    <dict>
                        <key>0</key>
                        <dict>
                            <key>name</key>
                            <string>punctuation.definition.comment.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>$\n?</string>
                    <key>name</key>
                    <string>comment.line.double-slash.c++</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>match</key>
                            <string>(?&gt;\\\s*\n)</string>
                            <key>name</key>
                            <string>punctuation.separator.continuation.c++</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*#\s*if(n?def)?\b.*$</string>
            <key>comment</key>
            <string>eat nested preprocessor if(def)s</string>
            <key>end</key>
            <string>^\s*#\s*endif\b.*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#disabled</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>#pragma-mark</string>
                </dict>
            </array>
        </dict>
        <key>parens</key>
        <dict>
            <key>begin</key>
            <string>\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>meta.parens.amxxpawn</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>pragma-mark</key>
        <dict>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.pragma.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>meta.toc-list.pragma-mark.amxxpawn</string>
                </dict>
            </dict>
            <key>match</key>
            <string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
            <key>name</key>
            <string>meta.section</string>
        </dict>
        <key>preprocessor-rule-disabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0)\b).*</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>name</key>
                    <string>comment.block.preprocessor.if-branch</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-disabled-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0)\b).*</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b)</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#block_innards</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>name</key>
                    <string>comment.block.preprocessor.if-branch.in-block</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-enabled</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0*1)\b)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b).*</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>contentName</key>
                    <string>comment.block.preprocessor.else-branch</string>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>$base</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-enabled-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#(if)\s+(0*1)\b)</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.if.amxxpawn</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.numeric.preprocessor.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>begin</key>
                    <string>^\s*(#\s*(else)\b).*</string>
                    <key>captures</key>
                    <dict>
                        <key>1</key>
                        <dict>
                            <key>name</key>
                            <string>meta.preprocessor.amxxpawn</string>
                        </dict>
                        <key>2</key>
                        <dict>
                            <key>name</key>
                            <string>keyword.control.import.else.amxxpawn</string>
                        </dict>
                    </dict>
                    <key>contentName</key>
                    <string>comment.block.preprocessor.else-branch.in-block</string>
                    <key>end</key>
                    <string>(?=^\s*#\s*endif\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#disabled</string>
                        </dict>
                        <dict>
                            <key>include</key>
                            <string>#pragma-mark</string>
                        </dict>
                    </array>
                </dict>
                <dict>
                    <key>begin</key>
                    <string></string>
                    <key>end</key>
                    <string>(?=^\s*#\s*(else|endif)\b.*$)</string>
                    <key>patterns</key>
                    <array>
                        <dict>
                            <key>include</key>
                            <string>#block_innards</string>
                        </dict>
                    </array>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-other</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b).*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>preprocessor-rule-other-block</key>
        <dict>
            <key>begin</key>
            <string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>meta.preprocessor.amxxpawn</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>keyword.control.import.amxxpawn</string>
                </dict>
            </dict>
            <key>end</key>
            <string>^\s*(#\s*(endif)\b).*$</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_innards</string>
                </dict>
            </array>
        </dict>
        <key>sizeof</key>
        <dict>
            <key>match</key>
            <string>\b(sizeof)\b</string>
            <key>name</key>
            <string>keyword.operator.sizeof.amxxpawn</string>
        </dict>
        <key>string_escaped_char</key>
        <dict>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
                    <key>name</key>
                    <string>constant.character.escape.amxxpawn</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>invalid.illegal.unknown-escape.amxxpawn</string>
                </dict>
            </array>
        </dict>
    </dict>
    <key>scopeName</key>
    <string>source.amxxpawn</string>
    <key>uuid</key>
    <string>B311E234-7BCD-4821-8455-4A1D8487E654</string>
</dict>
</plist>